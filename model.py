import numpy as np 

def solve_model(T,state):
    X, Y, Cin, S, Cout, SUM, O2, O3 = state
    dX = -X*0
    dY = -Y*0
    dCin = -Cin*0
    dS = -S*0.1+10*(((Y/5)**3))/(1+((X/5)**2)+((Y/5)**3)+((X/5)**2)*((Y/5)**3))+10*(((X/5)**2))/(1+((X/5)**2)+((Y/5)**3)+((X/5)**2)*((Y/5)**3))
    dCout = -Cout*0.1+10*(((O2/5)**2)+((O3/5)**3)+((O2/5)**2)*((O3/5)**3))/(1+((O2/5)**2)+((O3/5)**3)+((O2/5)**2)*((O3/5)**3))
    dSUM = -SUM*0.1+10*(((Cin/5)**3))/(1+((S/5)**2)+((Cin/5)**3)+((S/5)**2)*((Cin/5)**3))+10*(((S/5)**2))/(1+((S/5)**2)+((Cin/5)**3)+((S/5)**2)*((Cin/5)**3))
    dO2 = -O2*0.1+10*(((S/5)**2)*((Cin/5)**3))/(1+((S/5)**2)+((Cin/5)**3)+((S/5)**2)*((Cin/5)**3))
    dO3 = -O3*0.1+10*(((X/5)**2)*((Y/5)**3))/(1+((X/5)**2)+((Y/5)**3)+((X/5)**2)*((Y/5)**3))
    return np.array([dX, dY, dCin, dS, dCout, dSUM, dO2, dO3])

def solve_model_steady(state):
    return solve_model(0, state)
