import numpy as np 

def solve_model(T,state):
    A, B, Cin, SUM, Cout, O11, O21, O31 = state
    dA = -A*0
    dB = -B*0
    dCin = -Cin*0
    dSUM = -SUM*0.1+10*(((Cin/5)**3))/(1+((O11/5)**2)+((Cin/5)**3)+((O11/5)**2)*((Cin/5)**3))+10*(((O11/5)**2))/(1+((O11/5)**2)+((Cin/5)**3)+((O11/5)**2)*((Cin/5)**3))
    dCout = -Cout*0.1+10*(((O21/5)**2)+((O31/5)**3)+((O21/5)**2)*((O31/5)**3))/(1+((O21/5)**2)+((O31/5)**3)+((O21/5)**2)*((O31/5)**3))
    dO11 = -O11*0.1+10*(((B/5)**3))/(1+((A/5)**2)+((B/5)**3)+((A/5)**2)*((B/5)**3))+10*(((A/5)**2))/(1+((A/5)**2)+((B/5)**3)+((A/5)**2)*((B/5)**3))
    dO21 = -O21*0.1+10*(((O11/5)**2)*((Cin/5)**3))/(1+((O11/5)**2)+((Cin/5)**3)+((O11/5)**2)*((Cin/5)**3))
    dO31 = -O31*0.1+10*(((A/5)**2)*((B/5)**3))/(1+((A/5)**2)+((B/5)**3)+((A/5)**2)*((B/5)**3))
    return np.array([dA, dB, dCin, dSUM, dCout, dO11, dO21, dO31])

def solve_model_steady(state):
    return solve_model(0, state)
